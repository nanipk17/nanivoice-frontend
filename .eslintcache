[{"D:\\poc\\react-embedd\\src\\index.js":"1","D:\\poc\\react-embedd\\src\\App.js":"2","D:\\poc\\react-embedd\\src\\components\\ChatBot.js":"3","D:\\poc\\react-embedd\\src\\hooks\\recordAudio.js":"4","D:\\poc\\react-embedd\\src\\components\\UrduBot.js":"5","D:\\poc\\react-embedd\\src\\components\\chat\\index.jsx":"6","D:\\poc\\react-embedd\\src\\components\\chat\\body\\index.jsx":"7","D:\\poc\\react-embedd\\src\\components\\chat\\input\\index.jsx":"8","D:\\poc\\react-embedd\\src\\components\\chat\\chat-button\\index.jsx":"9","D:\\poc\\react-embedd\\src\\components\\chat\\body\\message.jsx":"10","D:\\poc\\react-embedd\\src\\components\\chat\\header\\index.jsx":"11","D:\\poc\\react-embedd\\src\\components\\chat\\alert\\index.jsx":"12"},{"size":1166,"mtime":1694609993077,"results":"13","hashOfConfig":"14"},{"size":556,"mtime":1692684490375,"results":"15","hashOfConfig":"14"},{"size":7903,"mtime":1691640749476,"results":"16","hashOfConfig":"14"},{"size":2590,"mtime":1691395407089,"results":"17","hashOfConfig":"14"},{"size":8542,"mtime":1692204270169,"results":"18","hashOfConfig":"14"},{"size":9445,"mtime":1694692099372,"results":"19","hashOfConfig":"14"},{"size":370,"mtime":1694265400474,"results":"20","hashOfConfig":"14"},{"size":1656,"mtime":1694694312954,"results":"21","hashOfConfig":"14"},{"size":705,"mtime":1691651032150,"results":"22","hashOfConfig":"14"},{"size":869,"mtime":1694693945213,"results":"23","hashOfConfig":"14"},{"size":1157,"mtime":1694695031360,"results":"24","hashOfConfig":"14"},{"size":239,"mtime":1691648863222,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"xonovq",{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\poc\\react-embedd\\src\\index.js",["58","59","60"],"D:\\poc\\react-embedd\\src\\App.js",["61","62","63"],"D:\\poc\\react-embedd\\src\\components\\ChatBot.js",["64","65","66","67","68","69","70","71","72","73"],"import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport axios from 'axios'\r\nimport Cookies from 'js-cookie'\r\nimport { BsFillChatLeftFill } from 'react-icons/bs'\r\nimport { LiaAngleDoubleDownSolid } from 'react-icons/lia'\r\nimport useAudioRecorder from '../hooks/recordAudio'\r\n\r\nconst base = 'https://justvoicebackend-vrtx.vercel.app'\r\n\r\n// FULL BOT CONTEXT\r\n\r\nlet mediaRecorder = null\r\nconst Chatbot = ({ siteURL }) => {\r\n  const defaultContextSchema = {\r\n    role: 'system',\r\n    content: `I am an AI Assistant of ${siteURL}  here to help you with your queries. You can ask me anything about our products and services.`,\r\n  }\r\n  const [messagesArray, setMessagesArray] = useState([defaultContextSchema])\r\n  const [products, setProducts] = useState([])\r\n  const [prompt, setPrompt] = useState('')\r\n  const [isBlocked, setIsBlocked] = useState(false)\r\n  const [chatOpened, setChatOpened] = useState(false)\r\n  const {\r\n    startRecording,\r\n    stopRecording,\r\n    togglePauseResume,\r\n\r\n    recordingBlob,\r\n    isRecording,\r\n    isPaused,\r\n    recordingTime,\r\n  } = useAudioRecorder()\r\n\r\n  const handleStartRecording = () => {\r\n    startRecording()\r\n  }\r\n\r\n  const handleStopRecording = async () => {\r\n    stopRecording()\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleAudioRecordingComplete(recordingBlob)\r\n  }, [recordingBlob])\r\n\r\n  const handleAudioRecordingComplete = async (audioBlob) => {\r\n    try {\r\n      const formData = new FormData()\r\n      formData.append('file', audioBlob, 'audio.wav')\r\n      // formData.append('model', 'whisper-1')\r\n      formData.append('language', 'en')\r\n\r\n      let voiceapi = base + '/api/voicechat'\r\n\r\n      const response = await fetch(voiceapi, {\r\n        method: 'POST',\r\n        body: formData,\r\n      })\r\n\r\n      if (response.ok) {\r\n        const { text, error } = await response.json()\r\n        updateMessagesArray(text)\r\n      } else {\r\n        console.error('Failed to send audio to the API.')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending audio to the API:', error)\r\n    }\r\n  }\r\n\r\n  const requestVoice = async (textInput) => {\r\n    const url = base + '/api/readvoice'\r\n\r\n    try {\r\n      const res = await fetch(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ text: textInput }),\r\n      })\r\n\r\n      if (res.status === 200) {\r\n        const audioBuffer = await res.arrayBuffer()\r\n        const audioContext = new AudioContext()\r\n        const audioBufferSource = audioContext.createBufferSource()\r\n        audioContext.decodeAudioData(audioBuffer, (buffer) => {\r\n          audioBufferSource.buffer = buffer\r\n          audioBufferSource.connect(audioContext.destination)\r\n          audioBufferSource.start()\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      messagesArray.length > 1 &&\r\n      messagesArray[messagesArray.length - 1].role !== 'system'\r\n    ) {\r\n      handleChatRequest()\r\n    }\r\n  }, [messagesArray, products])\r\n\r\n  const updateMessagesArray = (newMessage) => {\r\n    const newMessageSchema = {\r\n      role: 'user',\r\n      content: newMessage,\r\n    }\r\n    setMessagesArray((prevState) => [...prevState, newMessageSchema])\r\n  }\r\n\r\n  const handleChatRequest = async () => {\r\n    const key = 'chat_memory'\r\n    let convoSummary = Cookies.get(key) ? JSON.parse(Cookies.get(key)) : ''\r\n    const aisummary = {\r\n      role: 'system',\r\n      content: 'this is the summary of conversation i know ' + convoSummary,\r\n    }\r\n\r\n    try {\r\n      const obj = {\r\n        conversationId: Cookies.get('convoId') ? Cookies.get('convoId') : '',\r\n        textInput: messagesArray[messagesArray.length - 1].content,\r\n        siteURL: 'nani.pk',\r\n      }\r\n\r\n      const apiUrl = base + '/api/chatgpt/openai'\r\n\r\n      const response = await axios.post(apiUrl, {\r\n        input: obj,\r\n        summary: aisummary,\r\n      })\r\n\r\n      let { result, summary, convoId } = await response.data\r\n      if (obj.conversationId.length < 1) {\r\n        Cookies.set('convoId', convoId)\r\n      }\r\n\r\n      if (result.content.length > 0) {\r\n        setMessagesArray((prevState) => [...prevState, result])\r\n        console.log('result')\r\n        await requestVoice(result.content)\r\n\r\n        Cookies.remove(key)\r\n        Cookies.set(key, JSON.stringify(summary))\r\n      } else {\r\n        setProducts(result.result)\r\n\r\n        setMessagesArray((prevState) => [...prevState, result])\r\n        Cookies.remove(key)\r\n        Cookies.set(key, JSON.stringify(summary))\r\n      }\r\n    } catch (error) {\r\n      const result = {\r\n        role: 'system',\r\n        content:\r\n          'Sorry, I am not able to understand your query. Please try again.',\r\n      }\r\n      setMessagesArray((prevState) => [...prevState, result])\r\n      await requestVoice(result.content)\r\n\r\n      console.error('Error:', error)\r\n    }\r\n  }\r\n\r\n  const handleTextSubmit = () => {\r\n    if (prompt == '') {\r\n      alert('no input')\r\n      return\r\n    } else {\r\n      updateMessagesArray(prompt)\r\n      setPrompt('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!chatOpened ? (\r\n        <div onClick={() => setChatOpened(true)} className=\"chaticon\">\r\n          <BsFillChatLeftFill />\r\n        </div>\r\n      ) : (\r\n        <div className=\"chat-container\">\r\n          <div className=\"chat-head\">\r\n            <h1>{siteURL}</h1>\r\n            <div>\r\n              <LiaAngleDoubleDownSolid\r\n                onClick={() => setChatOpened(false)}\r\n                className=\"closeicon\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex-1 bg-white flex items-start justify-start\">\r\n            <div className=\"message-body\">\r\n              {messagesArray.map((message, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`message-container ${\r\n                    message.role === 'user' ? 'user-message' : 'bot-message'\r\n                  }`}\r\n                >\r\n                  {message.role === 'user' && (\r\n                    <img\r\n                      src=\"https://img.freepik.com/premium-vector/young-smiling-man-avatar-man-with-brown-beard-mustache-hair-wearing-yellow-sweater-sweatshirt-3d-vector-people-character-illustration-cartoon-minimal-style_365941-860.jpg\" // Replace with the URL of the user's avatar image\r\n                      alt=\"User Avatar\"\r\n                      className=\"avatar\"\r\n                    />\r\n                  )}\r\n\r\n                  <div className={`message-bubble ${message.role}`}>\r\n                    <p className=\"msg-body\">{message.content}</p>\r\n                  </div>\r\n\r\n                  {message.role === 'system' && (\r\n                    <img\r\n                      alt=\"Bot Avatar\"\r\n                      src=\"https://herobot.app/wp-content/uploads/2022/11/AI-bot-1.jpg\"\r\n                      className=\"avatar\"\r\n                    />\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"chat-input\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"chat-input-text\"\r\n              placeholder=\"Type your message...\"\r\n              onChange={(e) => setPrompt(e.target.value)}\r\n              onKeyPress={(e) => {\r\n                if (e.key === 'Enter') {\r\n                  handleTextSubmit()\r\n                }\r\n              }}\r\n            />\r\n\r\n            <button\r\n              onClick={isRecording ? handleStopRecording : handleStartRecording}\r\n            >\r\n              {isRecording ? 'Stop Recording' : 'Start Recording'}\r\n            </button>\r\n            {isBlocked && (\r\n              <p>\r\n                Microphone access blocked. Please allow microphone access to use\r\n                this feature.\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Chatbot\r\n",["74","75"],"D:\\poc\\react-embedd\\src\\hooks\\recordAudio.js",["76","77"],"import { useState, useCallback } from 'react'\r\n\r\nconst useAudioRecorder = (\r\n  audioTrackConstraints,\r\n  onNotAllowedOrFound,\r\n  mediaRecorderOptions\r\n) => {\r\n  const [isRecording, setIsRecording] = useState(false)\r\n  const [isPaused, setIsPaused] = useState(false)\r\n  const [recordingTime, setRecordingTime] = useState(0)\r\n  const [mediaRecorder, setMediaRecorder] = useState()\r\n  const [timerInterval, setTimerInterval] = useState()\r\n  const [recordingBlob, setRecordingBlob] = useState()\r\n\r\n  const _startTimer = useCallback(() => {\r\n    const interval = setInterval(() => {\r\n      setRecordingTime((time) => time + 1)\r\n    }, 1000)\r\n    setTimerInterval(interval)\r\n  }, [setRecordingTime, setTimerInterval])\r\n\r\n  const _stopTimer = useCallback(() => {\r\n    if (timerInterval != null) clearInterval(timerInterval)\r\n    setTimerInterval(undefined)\r\n  }, [timerInterval, setTimerInterval])\r\n\r\n  const startRecording = useCallback(() => {\r\n    if (timerInterval != null) return\r\n\r\n    navigator.mediaDevices\r\n      .getUserMedia({ audio: audioTrackConstraints ?? true })\r\n      .then((stream) => {\r\n        setIsRecording(true)\r\n        const recorder = new MediaRecorder(stream, mediaRecorderOptions)\r\n        setMediaRecorder(recorder)\r\n        recorder.start()\r\n        _startTimer()\r\n\r\n        recorder.addEventListener('dataavailable', (event) => {\r\n          setRecordingBlob(event.data)\r\n          recorder.stream.getTracks().forEach((t) => t.stop())\r\n          setMediaRecorder(undefined)\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.name, err.message, err.cause)\r\n        onNotAllowedOrFound?.(err)\r\n      })\r\n  }, [\r\n    timerInterval,\r\n    setIsRecording,\r\n    setMediaRecorder,\r\n    _startTimer,\r\n    setRecordingBlob,\r\n    onNotAllowedOrFound,\r\n    mediaRecorderOptions,\r\n  ])\r\n\r\n  const stopRecording = useCallback(() => {\r\n    mediaRecorder?.stop()\r\n    _stopTimer()\r\n    setRecordingTime(0)\r\n    setIsRecording(false)\r\n    setIsPaused(false)\r\n  }, [mediaRecorder, setRecordingTime, setIsRecording, setIsPaused, _stopTimer])\r\n\r\n  const togglePauseResume = useCallback(() => {\r\n    if (isPaused) {\r\n      setIsPaused(false)\r\n      mediaRecorder?.resume()\r\n      _startTimer()\r\n    } else {\r\n      setIsPaused(true)\r\n      _stopTimer()\r\n      mediaRecorder?.pause()\r\n    }\r\n  }, [mediaRecorder, setIsPaused, _startTimer, _stopTimer])\r\n\r\n  return {\r\n    startRecording,\r\n    stopRecording,\r\n    togglePauseResume,\r\n    recordingBlob,\r\n    isRecording,\r\n    isPaused,\r\n    recordingTime,\r\n    mediaRecorder,\r\n  }\r\n}\r\n\r\nexport default useAudioRecorder\r\n",["78","79"],"D:\\poc\\react-embedd\\src\\components\\UrduBot.js",["80","81","82","83","84","85","86","87","88","89","90","91","92","93"],"import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport axios from 'axios'\r\nimport Cookies from 'js-cookie'\r\nimport { BsFillChatLeftFill } from 'react-icons/bs'\r\nimport { LiaAngleDoubleDownSolid } from 'react-icons/lia'\r\nimport useAudioRecorder from '../hooks/recordAudio'\r\n\r\n// let  base = 'http://localhost:3000'\r\nconst base = 'https://justvoicebackend-vrtx.vercel.app'\r\n\r\n// FULL BOT CONTEXT\r\nconst defaultContextSchema = {\r\n  role: 'system',\r\n  content:\r\n    'میں یہاں آپ کے سوالات میں مدد کرنے کے لئے نانی ڈاٹ پی کے اے آئی اسسٹنٹ ہوں. آپ مجھ سے ہماری مصنوعات اور خدمات کے بارے میں کچھ پوچھ سکتے ہیں.',\r\n}\r\nlet newbase = 'http://localhost:3000'\r\n\r\nlet mediaRecorder = null\r\nconst ChatbotTest = ({ siteURL }) => {\r\n  const [messagesArray, setMessagesArray] = useState([defaultContextSchema])\r\n  const [products, setProducts] = useState([])\r\n  const [prompt, setPrompt] = useState('')\r\n  const [isBlocked, setIsBlocked] = useState(false)\r\n  const [chatOpened, setChatOpened] = useState(false)\r\n  const [record, setRecord] = useState(false) // state to control recording\r\n  const [audioBlob, setAudioBlob] = useState(null)\r\n  const {\r\n    startRecording,\r\n    stopRecording,\r\n    togglePauseResume,\r\n    recordingBlob,\r\n    isRecording,\r\n    isPaused,\r\n    recordingTime,\r\n  } = useAudioRecorder()\r\n\r\n  // function to handle the recorded blob\r\n\r\n  const handleStartRecording = () => {\r\n    startRecording()\r\n  }\r\n\r\n  const handleStopRecording = async () => {\r\n    stopRecording()\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleAudioRecordingComplete(recordingBlob)\r\n  }, [recordingBlob])\r\n\r\n  const handleAudioRecordingComplete = async (audioBlob) => {\r\n    try {\r\n      const formData = new FormData()\r\n      formData.append('file', audioBlob, 'audio.wav')\r\n      formData.append('language', 'en')\r\n\r\n      let voiceapi = base + '/api/gcloud/speech2text'\r\n      // let voiceapi = base+ '/api/gtest'\r\n      // let voiceapi = base+ '/api/gcloud/speech2text'\r\n\r\n      const response = await fetch(voiceapi, {\r\n        method: 'POST',\r\n        body: formData,\r\n      })\r\n\r\n      if (response.ok) {\r\n        const { transcription } = await response.json()\r\n        updateMessagesArray(transcription)\r\n      } else {\r\n        console.error('Failed to send audio to the API.')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending audio to the API:', error)\r\n    }\r\n  }\r\n\r\n  const requestVoice = async (textInput) => {\r\n    const url = base + '/api/readvoice'\r\n\r\n    try {\r\n      const res = await fetch(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          text: textInput,\r\n          voiceId: 'IKne3meq5aSn9XLyUdCD',\r\n        }),\r\n      })\r\n\r\n      if (res.status === 200) {\r\n        const audioBuffer = await res.arrayBuffer()\r\n        const audioContext = new AudioContext()\r\n        const audioBufferSource = audioContext.createBufferSource()\r\n        audioContext.decodeAudioData(audioBuffer, (buffer) => {\r\n          audioBufferSource.buffer = buffer\r\n          audioBufferSource.connect(audioContext.destination)\r\n          audioBufferSource.start()\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      messagesArray.length > 1 &&\r\n      messagesArray[messagesArray.length - 1].role !== 'system'\r\n    ) {\r\n      handleChatRequest()\r\n    }\r\n  }, [messagesArray, products])\r\n\r\n  const updateMessagesArray = (newMessage) => {\r\n    const newMessageSchema = {\r\n      role: 'user',\r\n      content: newMessage,\r\n    }\r\n    setMessagesArray((prevState) => [...prevState, newMessageSchema])\r\n  }\r\n\r\n  const handleChatRequest = async () => {\r\n    const key = 'chat_memory'\r\n    let convoSummary = Cookies.get(key) ? JSON.parse(Cookies.get(key)) : ''\r\n    const aisummary = {\r\n      role: 'system',\r\n      content: 'this is the summary of conversation i know ' + convoSummary,\r\n    }\r\n\r\n    try {\r\n      const obj = {\r\n        conversationId: Cookies.get('convoId') ? Cookies.get('convoId') : '',\r\n        textInput: messagesArray[messagesArray.length - 1].content,\r\n        siteURL: 'nani.pk',\r\n      }\r\n\r\n      const apiUrl = base + '/api/chatgpt/openai'\r\n\r\n      const response = await axios.post(apiUrl, {\r\n        input: obj,\r\n        summary: aisummary,\r\n      })\r\n\r\n      let { result, summary, convoId } = await response.data\r\n      if (obj.conversationId.length < 1) {\r\n        Cookies.set('convoId', convoId)\r\n      }\r\n\r\n      if (result.content) {\r\n        setMessagesArray((prevState) => [...prevState, result])\r\n        await requestVoice(result.content)\r\n        Cookies.remove(key)\r\n        Cookies.set(key, JSON.stringify(summary))\r\n      } else {\r\n        setProducts(result.result)\r\n\r\n        setMessagesArray((prevState) => [...prevState, result])\r\n        Cookies.remove(key)\r\n        Cookies.set(key, JSON.stringify(summary))\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error)\r\n      const result = {\r\n        role: 'system',\r\n        content:\r\n          'معذرت، میں آپ کے سوال کو سمجھنے کے قابل نہیں ہوں۔ دوبارہ کوشش کریں.',\r\n      }\r\n      setMessagesArray((prevState) => [...prevState, result])\r\n      await requestVoice(result.content)\r\n    }\r\n  }\r\n\r\n  const handleTextSubmit = () => {\r\n    if (prompt == '') {\r\n      alert('no input')\r\n      return\r\n    } else {\r\n      updateMessagesArray(prompt)\r\n      setPrompt('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!chatOpened ? (\r\n        <div onClick={() => setChatOpened(true)} className=\"chaticon-urdu\">\r\n          <BsFillChatLeftFill />\r\n        </div>\r\n      ) : (\r\n        <div className=\"chat-container\">\r\n          <div className=\"chat-head-urdu\">\r\n            <h1>{siteURL}</h1>\r\n            <div>\r\n              <LiaAngleDoubleDownSolid\r\n                onClick={() => setChatOpened(false)}\r\n                className=\"closeicon\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex-1 bg-white flex items-start justify-start\">\r\n            <div className=\"message-body\">\r\n              {messagesArray.map((message, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`message-container ${\r\n                    message.role === 'user'\r\n                      ? 'user-message-urdu'\r\n                      : 'bot-message'\r\n                  }`}\r\n                >\r\n                  {message.role === 'user' && (\r\n                    <img\r\n                      src=\"https://img.freepik.com/premium-vector/young-smiling-man-avatar-man-with-brown-beard-mustache-hair-wearing-yellow-sweater-sweatshirt-3d-vector-people-character-illustration-cartoon-minimal-style_365941-860.jpg\" // Replace with the URL of the user's avatar image\r\n                      alt=\"User Avatar\"\r\n                      className=\"avatar\"\r\n                    />\r\n                  )}\r\n\r\n                  <div className={`message-bubble-urdu ${message.role}`}>\r\n                    <p className=\"msg-body\">{message.content}</p>\r\n                  </div>\r\n\r\n                  {message.role === 'system' && (\r\n                    <img\r\n                      alt=\"Bot Avatar\"\r\n                      src=\"https://herobot.app/wp-content/uploads/2022/11/AI-bot-1.jpg\"\r\n                      className=\"avatar\"\r\n                    />\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"chat-input\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"chat-input-text\"\r\n              placeholder=\"Type your message...\"\r\n              onChange={(e) => setPrompt(e.target.value)}\r\n              onKeyPress={(e) => {\r\n                if (e.key === 'Enter') {\r\n                  handleTextSubmit()\r\n                }\r\n              }}\r\n            />\r\n\r\n            <button\r\n              className=\"chat-input-button-urdu\"\r\n              onClick={isRecording ? handleStopRecording : handleStartRecording}\r\n            >\r\n              {isRecording ? 'Stop Recording' : 'Start Recording'}\r\n            </button>\r\n            {isBlocked && (\r\n              <p>\r\n                Microphone access blocked. Please allow microphone access to use\r\n                this feature.\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChatbotTest\r\n","D:\\poc\\react-embedd\\src\\components\\chat\\index.jsx",["94","95","96","97","98","99","100","101","102","103","104"],"D:\\poc\\react-embedd\\src\\components\\chat\\body\\index.jsx",[],"D:\\poc\\react-embedd\\src\\components\\chat\\input\\index.jsx",[],"D:\\poc\\react-embedd\\src\\components\\chat\\chat-button\\index.jsx",[],["105","106"],"D:\\poc\\react-embedd\\src\\components\\chat\\body\\message.jsx",["107","108"],"import React from 'react'\r\n\r\nconst Message = (props) => {\r\n  const { sentBy, message, key, funcResult } = props\r\n\r\n  const url = 'https://nani.pk/products/'\r\n\r\n  return (\r\n    <div\r\n      className={`${\r\n        sentBy === 'user'\r\n          ? 'justvoice__chat__msg__user'\r\n          : 'justvoice__chat__msg__bot'\r\n      }`}\r\n    >\r\n      {message?.length > 0 ? (\r\n        message\r\n      ) : (\r\n        <div className=\"justvoice_media_body\">\r\n          {funcResult?.map((m) => (\r\n            <div className=\"justvoice_media_head\">\r\n              <img src={m.image} className=\"justvoice_chat_img\" alt=\"\" />\r\n              <h5>\r\n                <a target=\"_blank\" href={url + m.handle}>\r\n                  {m.title}\r\n                </a>{' '}\r\n              </h5>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message\r\n","D:\\poc\\react-embedd\\src\\components\\chat\\header\\index.jsx",["109"],"import React from 'react'\r\nimport { BiBot, BiChevronDown } from 'react-icons/bi'\r\nimport naniimg from '../../../justlogo1.png'\r\n\r\nconst Header = (props) => {\r\n  const { toggleChat } = props\r\n  return (\r\n    <div className=\"justvoice__chat__header\">\r\n      <div className=\"justvoice__chat__header__botname\">\r\n        <div className=\"justvoice__chat__bot__image\">\r\n          {/* <BiBot /> */}\r\n          <img\r\n            style={{\r\n              width: '60px',\r\n              height: '60px',\r\n            }}\r\n            src={naniimg}\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div className=\"justvoice__chat__bot__name\">\r\n          <div className=\"justvoice__chat__bot__name_p\">NANI.PK</div>\r\n          <small>Apki madadgar Nani</small>\r\n        </div>\r\n      </div>\r\n      <div\r\n        onClick={toggleChat}\r\n        className=\"justvoice__close__chat__icon__wrapper\"\r\n      >\r\n        <div className=\"justvoice__close__chat__icon__bg\"></div>\r\n        <div className=\"justvoice__mic__zindex\">\r\n          <BiChevronDown className=\"justvoice__chat__down__chevron\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","D:\\poc\\react-embedd\\src\\components\\chat\\alert\\index.jsx",[],{"ruleId":"110","severity":1,"message":"111","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":16},{"ruleId":"110","severity":1,"message":"114","line":12,"column":3,"nodeType":"112","messageId":"113","endLine":12,"endColumn":8},{"ruleId":"110","severity":1,"message":"115","line":13,"column":3,"nodeType":"112","messageId":"113","endLine":13,"endColumn":7},{"ruleId":"110","severity":1,"message":"116","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":15},{"ruleId":"110","severity":1,"message":"117","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":19},{"ruleId":"110","severity":1,"message":"118","line":4,"column":8,"nodeType":"112","messageId":"113","endLine":4,"endColumn":15},{"ruleId":"110","severity":1,"message":"119","line":1,"column":38,"nodeType":"112","messageId":"113","endLine":1,"endColumn":44},{"ruleId":"110","severity":1,"message":"120","line":13,"column":5,"nodeType":"112","messageId":"113","endLine":13,"endColumn":18},{"ruleId":"110","severity":1,"message":"121","line":22,"column":21,"nodeType":"112","messageId":"113","endLine":22,"endColumn":33},{"ruleId":"110","severity":1,"message":"122","line":27,"column":5,"nodeType":"112","messageId":"113","endLine":27,"endColumn":22},{"ruleId":"110","severity":1,"message":"123","line":31,"column":5,"nodeType":"112","messageId":"113","endLine":31,"endColumn":13},{"ruleId":"110","severity":1,"message":"124","line":32,"column":5,"nodeType":"112","messageId":"113","endLine":32,"endColumn":18},{"ruleId":"125","severity":1,"message":"126","line":45,"column":6,"nodeType":"127","endLine":45,"endColumn":21,"suggestions":"128"},{"ruleId":"110","severity":1,"message":"129","line":62,"column":23,"nodeType":"112","messageId":"113","endLine":62,"endColumn":28},{"ruleId":"125","severity":1,"message":"130","line":103,"column":6,"nodeType":"127","endLine":103,"endColumn":31,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":168,"column":16,"nodeType":"134","messageId":"135","endLine":168,"endColumn":18},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"125","severity":1,"message":"140","line":49,"column":6,"nodeType":"127","endLine":57,"endColumn":4,"suggestions":"141"},{"ruleId":"125","severity":1,"message":"142","line":77,"column":6,"nodeType":"127","endLine":77,"endColumn":59,"suggestions":"143"},{"ruleId":"136","replacedBy":"144"},{"ruleId":"138","replacedBy":"145"},{"ruleId":"110","severity":1,"message":"119","line":1,"column":38,"nodeType":"112","messageId":"113","endLine":1,"endColumn":44},{"ruleId":"110","severity":1,"message":"146","line":18,"column":5,"nodeType":"112","messageId":"113","endLine":18,"endColumn":12},{"ruleId":"110","severity":1,"message":"120","line":20,"column":5,"nodeType":"112","messageId":"113","endLine":20,"endColumn":18},{"ruleId":"110","severity":1,"message":"121","line":25,"column":21,"nodeType":"112","messageId":"113","endLine":25,"endColumn":33},{"ruleId":"110","severity":1,"message":"147","line":27,"column":10,"nodeType":"112","messageId":"113","endLine":27,"endColumn":16},{"ruleId":"110","severity":1,"message":"148","line":27,"column":18,"nodeType":"112","messageId":"113","endLine":27,"endColumn":27},{"ruleId":"110","severity":1,"message":"149","line":28,"column":10,"nodeType":"112","messageId":"113","endLine":28,"endColumn":19},{"ruleId":"110","severity":1,"message":"150","line":28,"column":21,"nodeType":"112","messageId":"113","endLine":28,"endColumn":33},{"ruleId":"110","severity":1,"message":"122","line":32,"column":5,"nodeType":"112","messageId":"113","endLine":32,"endColumn":22},{"ruleId":"110","severity":1,"message":"123","line":35,"column":5,"nodeType":"112","messageId":"113","endLine":35,"endColumn":13},{"ruleId":"110","severity":1,"message":"124","line":36,"column":5,"nodeType":"112","messageId":"113","endLine":36,"endColumn":18},{"ruleId":"125","severity":1,"message":"126","line":51,"column":6,"nodeType":"127","endLine":51,"endColumn":21,"suggestions":"151"},{"ruleId":"125","severity":1,"message":"130","line":113,"column":6,"nodeType":"127","endLine":113,"endColumn":31,"suggestions":"152"},{"ruleId":"132","severity":1,"message":"133","line":175,"column":16,"nodeType":"134","messageId":"135","endLine":175,"endColumn":18},{"ruleId":"153","severity":1,"message":"154","line":20,"column":45,"nodeType":"134","messageId":"155","endLine":20,"endColumn":46},{"ruleId":"125","severity":1,"message":"156","line":37,"column":6,"nodeType":"127","endLine":37,"endColumn":8,"suggestions":"157"},{"ruleId":"110","severity":1,"message":"122","line":67,"column":5,"nodeType":"112","messageId":"113","endLine":67,"endColumn":22},{"ruleId":"110","severity":1,"message":"123","line":71,"column":5,"nodeType":"112","messageId":"113","endLine":71,"endColumn":13},{"ruleId":"110","severity":1,"message":"124","line":72,"column":5,"nodeType":"112","messageId":"113","endLine":72,"endColumn":18},{"ruleId":"125","severity":1,"message":"126","line":85,"column":6,"nodeType":"127","endLine":85,"endColumn":21,"suggestions":"158"},{"ruleId":"132","severity":1,"message":"133","line":101,"column":14,"nodeType":"134","messageId":"135","endLine":101,"endColumn":16},{"ruleId":"132","severity":1,"message":"133","line":140,"column":18,"nodeType":"134","messageId":"135","endLine":140,"endColumn":20},{"ruleId":"125","severity":1,"message":"130","line":167,"column":6,"nodeType":"127","endLine":167,"endColumn":31,"suggestions":"159"},{"ruleId":"132","severity":1,"message":"133","line":252,"column":16,"nodeType":"134","messageId":"135","endLine":252,"endColumn":18},{"ruleId":"132","severity":1,"message":"133","line":268,"column":16,"nodeType":"134","messageId":"135","endLine":268,"endColumn":18},{"ruleId":"136","replacedBy":"160"},{"ruleId":"138","replacedBy":"161"},{"ruleId":"110","severity":1,"message":"162","line":4,"column":28,"nodeType":"112","messageId":"113","endLine":4,"endColumn":31},{"ruleId":"163","severity":1,"message":"164","line":24,"column":20,"nodeType":"165","endLine":24,"endColumn":35},{"ruleId":"110","severity":1,"message":"166","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":15},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Link' is defined but never used.","'ChatBot' is defined but never used.","'ChatbotTest' is defined but never used.","'Chatbot' is defined but never used.","'useRef' is defined but never used.","'mediaRecorder' is assigned a value but never used.","'setIsBlocked' is assigned a value but never used.","'togglePauseResume' is assigned a value but never used.","'isPaused' is assigned a value but never used.","'recordingTime' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleAudioRecordingComplete'. Either include it or remove the dependency array.","ArrayExpression",["167"],"'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleChatRequest'. Either include it or remove the dependency array.",["168"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["169"],"no-negated-in-lhs",["170"],"React Hook useCallback has a missing dependency: 'audioTrackConstraints'. Either include it or remove the dependency array.",["171"],"React Hook useCallback has a missing dependency: 'isPaused'. Either include it or remove the dependency array.",["172"],["169"],["170"],"'newbase' is assigned a value but never used.","'record' is assigned a value but never used.","'setRecord' is assigned a value but never used.","'audioBlob' is assigned a value but never used.","'setAudioBlob' is assigned a value but never used.",["173"],["174"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'apiKey' and 'mail'. Either include them or remove the dependency array.",["175"],["176"],["177"],["169"],["170"],"'key' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'BiBot' is defined but never used.",{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},"no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"178","fix":"186"},{"desc":"180","fix":"187"},{"desc":"188","fix":"189"},{"desc":"178","fix":"190"},{"desc":"180","fix":"191"},"Update the dependencies array to be: [handleAudioRecordingComplete, recordingBlob]",{"range":"192","text":"193"},"Update the dependencies array to be: [handleChatRequest, messagesArray, products]",{"range":"194","text":"195"},"Update the dependencies array to be: [timerInterval, audioTrackConstraints, mediaRecorderOptions, _startTimer, onNotAllowedOrFound]",{"range":"196","text":"197"},"Update the dependencies array to be: [isPaused, mediaRecorder, _startTimer, _stopTimer]",{"range":"198","text":"199"},{"range":"200","text":"193"},{"range":"201","text":"195"},"Update the dependencies array to be: [apiKey, mail]",{"range":"202","text":"203"},{"range":"204","text":"193"},{"range":"205","text":"195"},[1313,1328],"[handleAudioRecordingComplete, recordingBlob]",[2964,2989],"[handleChatRequest, messagesArray, products]",[1651,1815],"[timerInterval, audioTrackConstraints, mediaRecorderOptions, _startTimer, onNotAllowedOrFound]",[2319,2372],"[isPaused, mediaRecorder, _startTimer, _stopTimer]",[1577,1592],[3366,3391],[1045,1047],"[apiKey, mail]",[2243,2258],[4750,4775]]