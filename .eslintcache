[{"D:\\poc\\react-embedd\\src\\index.js":"1","D:\\poc\\react-embedd\\src\\App.js":"2","D:\\poc\\react-embedd\\src\\components\\ChatBot.js":"3","D:\\poc\\react-embedd\\src\\hooks\\recordAudio.js":"4","D:\\poc\\react-embedd\\src\\components\\UrduBot.js":"5","D:\\poc\\react-embedd\\src\\components\\chat\\index.jsx":"6","D:\\poc\\react-embedd\\src\\components\\chat\\body\\index.jsx":"7","D:\\poc\\react-embedd\\src\\components\\chat\\input\\index.jsx":"8","D:\\poc\\react-embedd\\src\\components\\chat\\chat-button\\index.jsx":"9","D:\\poc\\react-embedd\\src\\components\\chat\\body\\message.jsx":"10","D:\\poc\\react-embedd\\src\\components\\chat\\header\\index.jsx":"11","D:\\poc\\react-embedd\\src\\components\\chat\\alert\\index.jsx":"12"},{"size":442,"mtime":1692100888552,"results":"13","hashOfConfig":"14"},{"size":533,"mtime":1692100911278,"results":"15","hashOfConfig":"14"},{"size":7903,"mtime":1691640749476,"results":"16","hashOfConfig":"14"},{"size":2590,"mtime":1691395407089,"results":"17","hashOfConfig":"14"},{"size":8536,"mtime":1691732184635,"results":"18","hashOfConfig":"14"},{"size":7072,"mtime":1692103098336,"results":"19","hashOfConfig":"14"},{"size":332,"mtime":1691652750048,"results":"20","hashOfConfig":"14"},{"size":1640,"mtime":1691651665644,"results":"21","hashOfConfig":"14"},{"size":705,"mtime":1691651032150,"results":"22","hashOfConfig":"14"},{"size":332,"mtime":1691652710444,"results":"23","hashOfConfig":"14"},{"size":1129,"mtime":1691649436382,"results":"24","hashOfConfig":"14"},{"size":239,"mtime":1691648863222,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xonovq",{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\poc\\react-embedd\\src\\index.js",[],"D:\\poc\\react-embedd\\src\\App.js",["57","58","59"],"D:\\poc\\react-embedd\\src\\components\\ChatBot.js",["60","61","62","63","64","65","66","67","68","69"],"D:\\poc\\react-embedd\\src\\hooks\\recordAudio.js",["70","71"],"import { useState, useCallback } from 'react'\r\n\r\nconst useAudioRecorder = (\r\n  audioTrackConstraints,\r\n  onNotAllowedOrFound,\r\n  mediaRecorderOptions\r\n) => {\r\n  const [isRecording, setIsRecording] = useState(false)\r\n  const [isPaused, setIsPaused] = useState(false)\r\n  const [recordingTime, setRecordingTime] = useState(0)\r\n  const [mediaRecorder, setMediaRecorder] = useState()\r\n  const [timerInterval, setTimerInterval] = useState()\r\n  const [recordingBlob, setRecordingBlob] = useState()\r\n\r\n  const _startTimer = useCallback(() => {\r\n    const interval = setInterval(() => {\r\n      setRecordingTime((time) => time + 1)\r\n    }, 1000)\r\n    setTimerInterval(interval)\r\n  }, [setRecordingTime, setTimerInterval])\r\n\r\n  const _stopTimer = useCallback(() => {\r\n    if (timerInterval != null) clearInterval(timerInterval)\r\n    setTimerInterval(undefined)\r\n  }, [timerInterval, setTimerInterval])\r\n\r\n  const startRecording = useCallback(() => {\r\n    if (timerInterval != null) return\r\n\r\n    navigator.mediaDevices\r\n      .getUserMedia({ audio: audioTrackConstraints ?? true })\r\n      .then((stream) => {\r\n        setIsRecording(true)\r\n        const recorder = new MediaRecorder(stream, mediaRecorderOptions)\r\n        setMediaRecorder(recorder)\r\n        recorder.start()\r\n        _startTimer()\r\n\r\n        recorder.addEventListener('dataavailable', (event) => {\r\n          setRecordingBlob(event.data)\r\n          recorder.stream.getTracks().forEach((t) => t.stop())\r\n          setMediaRecorder(undefined)\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.name, err.message, err.cause)\r\n        onNotAllowedOrFound?.(err)\r\n      })\r\n  }, [\r\n    timerInterval,\r\n    setIsRecording,\r\n    setMediaRecorder,\r\n    _startTimer,\r\n    setRecordingBlob,\r\n    onNotAllowedOrFound,\r\n    mediaRecorderOptions,\r\n  ])\r\n\r\n  const stopRecording = useCallback(() => {\r\n    mediaRecorder?.stop()\r\n    _stopTimer()\r\n    setRecordingTime(0)\r\n    setIsRecording(false)\r\n    setIsPaused(false)\r\n  }, [mediaRecorder, setRecordingTime, setIsRecording, setIsPaused, _stopTimer])\r\n\r\n  const togglePauseResume = useCallback(() => {\r\n    if (isPaused) {\r\n      setIsPaused(false)\r\n      mediaRecorder?.resume()\r\n      _startTimer()\r\n    } else {\r\n      setIsPaused(true)\r\n      _stopTimer()\r\n      mediaRecorder?.pause()\r\n    }\r\n  }, [mediaRecorder, setIsPaused, _startTimer, _stopTimer])\r\n\r\n  return {\r\n    startRecording,\r\n    stopRecording,\r\n    togglePauseResume,\r\n    recordingBlob,\r\n    isRecording,\r\n    isPaused,\r\n    recordingTime,\r\n    mediaRecorder,\r\n  }\r\n}\r\n\r\nexport default useAudioRecorder\r\n",["72","73"],"D:\\poc\\react-embedd\\src\\components\\UrduBot.js",["74","75","76","77","78","79","80","81","82","83","84","85","86","87"],"import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport axios from 'axios'\r\nimport Cookies from 'js-cookie'\r\nimport { BsFillChatLeftFill } from 'react-icons/bs'\r\nimport { LiaAngleDoubleDownSolid } from 'react-icons/lia'\r\nimport useAudioRecorder from '../hooks/recordAudio'\r\n\r\n// let  base = 'http://localhost:3000'\r\nconst base = 'https://justvoicebackend-vrtx.vercel.app'\r\n\r\n// FULL BOT CONTEXT\r\nconst defaultContextSchema = {\r\n  role: 'system',\r\n  content:\r\n    'میں یہاں آپ کے سوالات میں مدد کرنے کے لئے نانی ڈاٹ پی کے اے آئی اسسٹنٹ ہوں. آپ مجھ سے ہماری مصنوعات اور خدمات کے بارے میں کچھ پوچھ سکتے ہیں.',\r\n}\r\nlet newbase = 'http://localhost:3000'\r\n\r\nlet mediaRecorder = null\r\nconst ChatbotTest = ({ siteURL }) => {\r\n  const [messagesArray, setMessagesArray] = useState([defaultContextSchema])\r\n  const [products, setProducts] = useState([])\r\n  const [prompt, setPrompt] = useState('')\r\n  const [isBlocked, setIsBlocked] = useState(false)\r\n  const [chatOpened, setChatOpened] = useState(false)\r\n  const [record, setRecord] = useState(false) // state to control recording\r\n  const [audioBlob, setAudioBlob] = useState(null)\r\n  const {\r\n    startRecording,\r\n    stopRecording,\r\n    togglePauseResume,\r\n    recordingBlob,\r\n    isRecording,\r\n    isPaused,\r\n    recordingTime,\r\n  } = useAudioRecorder()\r\n\r\n  // function to handle the recorded blob\r\n\r\n  const handleStartRecording = () => {\r\n    startRecording()\r\n  }\r\n\r\n  const handleStopRecording = async () => {\r\n    stopRecording()\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleAudioRecordingComplete(recordingBlob)\r\n  }, [recordingBlob])\r\n\r\n  const handleAudioRecordingComplete = async (audioBlob) => {\r\n    try {\r\n      const formData = new FormData()\r\n      formData.append('file', audioBlob, 'audio.wav')\r\n      formData.append('language', 'en')\r\n\r\n      let voiceapi = base+ '/api/gcloud/gtest2'\r\n      // let voiceapi = base+ '/api/gtest'\r\n      // let voiceapi = base+ '/api/gcloud/speech2text'\r\n\r\n      const response = await fetch(voiceapi, {\r\n        method: 'POST',\r\n        body: formData,\r\n      })\r\n\r\n      if (response.ok) {\r\n        const { transcription } = await response.json()\r\n        updateMessagesArray(transcription)\r\n      } else {\r\n        console.error('Failed to send audio to the API.')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending audio to the API:', error)\r\n    }\r\n  }\r\n\r\n  const requestVoice = async (textInput) => {\r\n    const url = base + '/api/readvoice'\r\n\r\n    try {\r\n      const res = await fetch(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          text: textInput,\r\n          voiceId: 'IKne3meq5aSn9XLyUdCD',\r\n        }),\r\n      })\r\n\r\n      if (res.status === 200) {\r\n        const audioBuffer = await res.arrayBuffer()\r\n        const audioContext = new AudioContext()\r\n        const audioBufferSource = audioContext.createBufferSource()\r\n        audioContext.decodeAudioData(audioBuffer, (buffer) => {\r\n          audioBufferSource.buffer = buffer\r\n          audioBufferSource.connect(audioContext.destination)\r\n          audioBufferSource.start()\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      messagesArray.length > 1 &&\r\n      messagesArray[messagesArray.length - 1].role !== 'system'\r\n    ) {\r\n      handleChatRequest()\r\n    }\r\n  }, [messagesArray, products])\r\n\r\n  const updateMessagesArray = (newMessage) => {\r\n    const newMessageSchema = {\r\n      role: 'user',\r\n      content: newMessage,\r\n    }\r\n    setMessagesArray((prevState) => [...prevState, newMessageSchema])\r\n  }\r\n\r\n  const handleChatRequest = async () => {\r\n    const key = 'chat_memory'\r\n    let convoSummary = Cookies.get(key) ? JSON.parse(Cookies.get(key)) : ''\r\n    const aisummary = {\r\n      role: 'system',\r\n      content: 'this is the summary of conversation i know ' + convoSummary,\r\n    }\r\n\r\n    try {\r\n      const obj = {\r\n        conversationId: Cookies.get('convoId') ? Cookies.get('convoId') : '',\r\n        textInput: messagesArray[messagesArray.length - 1].content,\r\n        siteURL: 'nani.pk',\r\n      }\r\n\r\n      const apiUrl = base + '/api/chatgpt/openai'\r\n\r\n      const response = await axios.post(apiUrl, {\r\n        input: obj,\r\n        summary: aisummary,\r\n      })\r\n\r\n      let { result, summary, convoId } = await response.data\r\n      if (obj.conversationId.length < 1) {\r\n        Cookies.set('convoId', convoId)\r\n      }\r\n\r\n      if (result.content) {\r\n        setMessagesArray((prevState) => [...prevState, result])\r\n        await requestVoice(result.content)\r\n        Cookies.remove(key)\r\n        Cookies.set(key, JSON.stringify(summary))\r\n      } else {\r\n        setProducts(result.result)\r\n\r\n        setMessagesArray((prevState) => [...prevState, result])\r\n        Cookies.remove(key)\r\n        Cookies.set(key, JSON.stringify(summary))\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error)\r\n      const result = {\r\n        role: 'system',\r\n        content:\r\n          'معذرت، میں آپ کے سوال کو سمجھنے کے قابل نہیں ہوں۔ دوبارہ کوشش کریں.',\r\n      }\r\n      setMessagesArray((prevState) => [...prevState, result])\r\n      await requestVoice(result.content)\r\n    }\r\n  }\r\n\r\n  const handleTextSubmit = () => {\r\n    if (prompt == '') {\r\n      alert('no input')\r\n      return\r\n    } else {\r\n      updateMessagesArray(prompt)\r\n      setPrompt('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!chatOpened ? (\r\n        <div onClick={() => setChatOpened(true)} className=\"chaticon-urdu\">\r\n          <BsFillChatLeftFill />\r\n        </div>\r\n      ) : (\r\n        <div className=\"chat-container\">\r\n          <div className=\"chat-head-urdu\">\r\n            <h1>{siteURL}</h1>\r\n            <div>\r\n              <LiaAngleDoubleDownSolid\r\n                onClick={() => setChatOpened(false)}\r\n                className=\"closeicon\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex-1 bg-white flex items-start justify-start\">\r\n            <div className=\"message-body\">\r\n              {messagesArray.map((message, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`message-container ${\r\n                    message.role === 'user'\r\n                      ? 'user-message-urdu'\r\n                      : 'bot-message'\r\n                  }`}\r\n                >\r\n                  {message.role === 'user' && (\r\n                    <img\r\n                      src=\"https://img.freepik.com/premium-vector/young-smiling-man-avatar-man-with-brown-beard-mustache-hair-wearing-yellow-sweater-sweatshirt-3d-vector-people-character-illustration-cartoon-minimal-style_365941-860.jpg\" // Replace with the URL of the user's avatar image\r\n                      alt=\"User Avatar\"\r\n                      className=\"avatar\"\r\n                    />\r\n                  )}\r\n\r\n                  <div className={`message-bubble-urdu ${message.role}`}>\r\n                    <p className=\"msg-body\">{message.content}</p>\r\n                  </div>\r\n\r\n                  {message.role === 'system' && (\r\n                    <img\r\n                      alt=\"Bot Avatar\"\r\n                      src=\"https://herobot.app/wp-content/uploads/2022/11/AI-bot-1.jpg\"\r\n                      className=\"avatar\"\r\n                    />\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"chat-input\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"chat-input-text\"\r\n              placeholder=\"Type your message...\"\r\n              onChange={(e) => setPrompt(e.target.value)}\r\n              onKeyPress={(e) => {\r\n                if (e.key === 'Enter') {\r\n                  handleTextSubmit()\r\n                }\r\n              }}\r\n            />\r\n\r\n            <button\r\n              className=\"chat-input-button-urdu\"\r\n              onClick={isRecording ? handleStopRecording : handleStartRecording}\r\n            >\r\n              {isRecording ? 'Stop Recording' : 'Start Recording'}\r\n            </button>\r\n            {isBlocked && (\r\n              <p>\r\n                Microphone access blocked. Please allow microphone access to use\r\n                this feature.\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChatbotTest\r\n",["88","89"],"D:\\poc\\react-embedd\\src\\components\\chat\\index.jsx",["90","91","92","93","94","95","96","97","98","99","100","101","102","103"],"D:\\poc\\react-embedd\\src\\components\\chat\\body\\index.jsx",[],"D:\\poc\\react-embedd\\src\\components\\chat\\input\\index.jsx",["104"],"import React from 'react'\r\nimport { BsFillMicFill } from 'react-icons/bs'\r\n\r\nconst Input = ({\r\n  handleStartRecording,\r\n  handleStopRecording,\r\n  setPrompt,\r\n  prompt,\r\n  isRecording,\r\n}) => {\r\n  return (\r\n    <div className=\"justvoice__input\">\r\n      <div className=\"justvoice__input__top__border\"></div>\r\n      <div className=\"justvoice__input__textarea\">\r\n        <textarea\r\n          name=\"enter_msg\"\r\n          id=\"enter_msg\"\r\n          value={prompt}\r\n          placeholder=\"Enter your message...\"\r\n          onChange={(e) => setPrompt(e.target.value)}\r\n        ></textarea>\r\n      </div>\r\n      <div className=\"justvoice__bottom__layout\">\r\n        <div className=\"justvoice__mic__button\">\r\n          {isRecording ? (\r\n            <div className=\"justvoice__mic__zindex\" onClick={handleStopRecording} >\r\n              <BsFillMicFill className=\"justvoice__mic__icon_recording\" />\r\n            </div>\r\n          ) : (\r\n            <div className=\"justvoice__mic__zindex\" onClick={handleStartRecording} >\r\n              <BsFillMicFill className=\"justvoice__mic__icon\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <small className=\"justvoice__bottom__copyright\">\r\n          <span>Powered by</span>{' '}\r\n          <a\r\n            href=\"https://www.justautofy.com/products/justvoice\"\r\n            target=\"_blank\"\r\n          >\r\n            <img\r\n              className=\"justvoice__bottom__copyright__img\"\r\n              src=\"https://www.justautofy.com/assets/images/shared/logo-dark.svg\"\r\n              alt=\"img\"\r\n            />\r\n          </a>\r\n        </small>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input\r\n",["105","106"],"D:\\poc\\react-embedd\\src\\components\\chat\\chat-button\\index.jsx",[],"D:\\poc\\react-embedd\\src\\components\\chat\\body\\message.jsx",[],"D:\\poc\\react-embedd\\src\\components\\chat\\header\\index.jsx",[],["107","108"],"D:\\poc\\react-embedd\\src\\components\\chat\\alert\\index.jsx",[],{"ruleId":"109","severity":1,"message":"110","line":2,"column":8,"nodeType":"111","messageId":"112","endLine":2,"endColumn":15},{"ruleId":"109","severity":1,"message":"113","line":3,"column":8,"nodeType":"111","messageId":"112","endLine":3,"endColumn":19},{"ruleId":"109","severity":1,"message":"114","line":4,"column":8,"nodeType":"111","messageId":"112","endLine":4,"endColumn":15},{"ruleId":"109","severity":1,"message":"115","line":1,"column":38,"nodeType":"111","messageId":"112","endLine":1,"endColumn":44},{"ruleId":"109","severity":1,"message":"116","line":13,"column":5,"nodeType":"111","messageId":"112","endLine":13,"endColumn":18},{"ruleId":"109","severity":1,"message":"117","line":22,"column":21,"nodeType":"111","messageId":"112","endLine":22,"endColumn":33},{"ruleId":"109","severity":1,"message":"118","line":27,"column":5,"nodeType":"111","messageId":"112","endLine":27,"endColumn":22},{"ruleId":"109","severity":1,"message":"119","line":31,"column":5,"nodeType":"111","messageId":"112","endLine":31,"endColumn":13},{"ruleId":"109","severity":1,"message":"120","line":32,"column":5,"nodeType":"111","messageId":"112","endLine":32,"endColumn":18},{"ruleId":"121","severity":1,"message":"122","line":45,"column":6,"nodeType":"123","endLine":45,"endColumn":21,"suggestions":"124"},{"ruleId":"109","severity":1,"message":"125","line":62,"column":23,"nodeType":"111","messageId":"112","endLine":62,"endColumn":28},{"ruleId":"121","severity":1,"message":"126","line":103,"column":6,"nodeType":"123","endLine":103,"endColumn":31,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":168,"column":16,"nodeType":"130","messageId":"131","endLine":168,"endColumn":18},{"ruleId":"121","severity":1,"message":"132","line":49,"column":6,"nodeType":"123","endLine":57,"endColumn":4,"suggestions":"133"},{"ruleId":"121","severity":1,"message":"134","line":77,"column":6,"nodeType":"123","endLine":77,"endColumn":59,"suggestions":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"109","severity":1,"message":"115","line":1,"column":38,"nodeType":"111","messageId":"112","endLine":1,"endColumn":44},{"ruleId":"109","severity":1,"message":"140","line":18,"column":5,"nodeType":"111","messageId":"112","endLine":18,"endColumn":12},{"ruleId":"109","severity":1,"message":"116","line":20,"column":5,"nodeType":"111","messageId":"112","endLine":20,"endColumn":18},{"ruleId":"109","severity":1,"message":"117","line":25,"column":21,"nodeType":"111","messageId":"112","endLine":25,"endColumn":33},{"ruleId":"109","severity":1,"message":"141","line":27,"column":10,"nodeType":"111","messageId":"112","endLine":27,"endColumn":16},{"ruleId":"109","severity":1,"message":"142","line":27,"column":18,"nodeType":"111","messageId":"112","endLine":27,"endColumn":27},{"ruleId":"109","severity":1,"message":"143","line":28,"column":10,"nodeType":"111","messageId":"112","endLine":28,"endColumn":19},{"ruleId":"109","severity":1,"message":"144","line":28,"column":21,"nodeType":"111","messageId":"112","endLine":28,"endColumn":33},{"ruleId":"109","severity":1,"message":"118","line":32,"column":5,"nodeType":"111","messageId":"112","endLine":32,"endColumn":22},{"ruleId":"109","severity":1,"message":"119","line":35,"column":5,"nodeType":"111","messageId":"112","endLine":35,"endColumn":13},{"ruleId":"109","severity":1,"message":"120","line":36,"column":5,"nodeType":"111","messageId":"112","endLine":36,"endColumn":18},{"ruleId":"121","severity":1,"message":"122","line":51,"column":6,"nodeType":"123","endLine":51,"endColumn":21,"suggestions":"145"},{"ruleId":"121","severity":1,"message":"126","line":113,"column":6,"nodeType":"123","endLine":113,"endColumn":31,"suggestions":"146"},{"ruleId":"128","severity":1,"message":"129","line":175,"column":16,"nodeType":"130","messageId":"131","endLine":175,"endColumn":18},{"ruleId":"136","replacedBy":"147"},{"ruleId":"138","replacedBy":"148"},{"ruleId":"109","severity":1,"message":"149","line":8,"column":8,"nodeType":"111","messageId":"112","endLine":8,"endColumn":13},{"ruleId":"109","severity":1,"message":"150","line":11,"column":10,"nodeType":"111","messageId":"112","endLine":11,"endColumn":27},{"ruleId":"109","severity":1,"message":"118","line":44,"column":5,"nodeType":"111","messageId":"112","endLine":44,"endColumn":22},{"ruleId":"109","severity":1,"message":"119","line":48,"column":5,"nodeType":"111","messageId":"112","endLine":48,"endColumn":13},{"ruleId":"109","severity":1,"message":"120","line":49,"column":5,"nodeType":"111","messageId":"112","endLine":49,"endColumn":18},{"ruleId":"121","severity":1,"message":"122","line":62,"column":6,"nodeType":"123","endLine":62,"endColumn":21,"suggestions":"151"},{"ruleId":"109","severity":1,"message":"140","line":71,"column":11,"nodeType":"111","messageId":"112","endLine":71,"endColumn":18},{"ruleId":"128","severity":1,"message":"129","line":72,"column":28,"nodeType":"130","messageId":"131","endLine":72,"endColumn":30},{"ruleId":"109","severity":1,"message":"152","line":94,"column":9,"nodeType":"111","messageId":"112","endLine":94,"endColumn":16},{"ruleId":"128","severity":1,"message":"129","line":94,"column":23,"nodeType":"130","messageId":"131","endLine":94,"endColumn":25},{"ruleId":"128","severity":1,"message":"129","line":102,"column":18,"nodeType":"130","messageId":"131","endLine":102,"endColumn":20},{"ruleId":"121","severity":1,"message":"126","line":128,"column":6,"nodeType":"123","endLine":128,"endColumn":31,"suggestions":"153"},{"ruleId":"128","severity":1,"message":"129","line":184,"column":16,"nodeType":"130","messageId":"131","endLine":184,"endColumn":18},{"ruleId":"128","severity":1,"message":"129","line":195,"column":16,"nodeType":"130","messageId":"131","endLine":195,"endColumn":18},{"ruleId":"154","severity":1,"message":"155","line":39,"column":13,"nodeType":"156","endLine":39,"endColumn":28},{"ruleId":"136","replacedBy":"157"},{"ruleId":"138","replacedBy":"158"},{"ruleId":"136","replacedBy":"159"},{"ruleId":"138","replacedBy":"160"},"no-unused-vars","'ChatBot' is defined but never used.","Identifier","unusedVar","'ChatbotTest' is defined but never used.","'Chatbot' is defined but never used.","'useRef' is defined but never used.","'mediaRecorder' is assigned a value but never used.","'setIsBlocked' is assigned a value but never used.","'togglePauseResume' is assigned a value but never used.","'isPaused' is assigned a value but never used.","'recordingTime' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleAudioRecordingComplete'. Either include it or remove the dependency array.","ArrayExpression",["161"],"'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleChatRequest'. Either include it or remove the dependency array.",["162"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useCallback has a missing dependency: 'audioTrackConstraints'. Either include it or remove the dependency array.",["163"],"React Hook useCallback has a missing dependency: 'isPaused'. Either include it or remove the dependency array.",["164"],"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"'newbase' is assigned a value but never used.","'record' is assigned a value but never used.","'setRecord' is assigned a value but never used.","'audioBlob' is assigned a value but never used.","'setAudioBlob' is assigned a value but never used.",["167"],["168"],["165"],["166"],"'Alert' is defined but never used.","'BsFillMicMuteFill' is defined but never used.",["169"],"'voiceId' is assigned a value but never used.",["170"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["165"],["166"],["165"],["166"],{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"no-global-assign","no-unsafe-negation",{"desc":"171","fix":"179"},{"desc":"173","fix":"180"},{"desc":"171","fix":"181"},{"desc":"173","fix":"182"},"Update the dependencies array to be: [handleAudioRecordingComplete, recordingBlob]",{"range":"183","text":"184"},"Update the dependencies array to be: [handleChatRequest, messagesArray, products]",{"range":"185","text":"186"},"Update the dependencies array to be: [timerInterval, audioTrackConstraints, mediaRecorderOptions, _startTimer, onNotAllowedOrFound]",{"range":"187","text":"188"},"Update the dependencies array to be: [isPaused, mediaRecorder, _startTimer, _stopTimer]",{"range":"189","text":"190"},{"range":"191","text":"184"},{"range":"192","text":"186"},{"range":"193","text":"184"},{"range":"194","text":"186"},[1313,1328],"[handleAudioRecordingComplete, recordingBlob]",[2964,2989],"[handleChatRequest, messagesArray, products]",[1651,1815],"[timerInterval, audioTrackConstraints, mediaRecorderOptions, _startTimer, onNotAllowedOrFound]",[2319,2372],"[isPaused, mediaRecorder, _startTimer, _stopTimer]",[1577,1592],[3360,3385],[1714,1729],[3688,3713]]