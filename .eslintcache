[{"D:\\poc\\react-embedd\\src\\index.js":"1","D:\\poc\\react-embedd\\src\\App.js":"2","D:\\poc\\react-embedd\\src\\components\\ChatBot.js":"3","D:\\poc\\react-embedd\\src\\hooks\\recordAudio.js":"4","D:\\poc\\react-embedd\\src\\components\\UrduBot.js":"5","D:\\poc\\react-embedd\\src\\components\\chat\\index.jsx":"6","D:\\poc\\react-embedd\\src\\components\\chat\\body\\index.jsx":"7","D:\\poc\\react-embedd\\src\\components\\chat\\input\\index.jsx":"8","D:\\poc\\react-embedd\\src\\components\\chat\\chat-button\\index.jsx":"9","D:\\poc\\react-embedd\\src\\components\\chat\\body\\message.jsx":"10","D:\\poc\\react-embedd\\src\\components\\chat\\header\\index.jsx":"11","D:\\poc\\react-embedd\\src\\components\\chat\\alert\\index.jsx":"12"},{"size":622,"mtime":1693584483347,"results":"13","hashOfConfig":"14"},{"size":556,"mtime":1692684490375,"results":"15","hashOfConfig":"14"},{"size":7903,"mtime":1691640749476,"results":"16","hashOfConfig":"14"},{"size":2590,"mtime":1691395407089,"results":"17","hashOfConfig":"14"},{"size":8542,"mtime":1692204270169,"results":"18","hashOfConfig":"14"},{"size":9617,"mtime":1694267914159,"results":"19","hashOfConfig":"14"},{"size":370,"mtime":1694265400474,"results":"20","hashOfConfig":"14"},{"size":1640,"mtime":1691651665644,"results":"21","hashOfConfig":"14"},{"size":705,"mtime":1691651032150,"results":"22","hashOfConfig":"14"},{"size":538,"mtime":1694268049128,"results":"23","hashOfConfig":"14"},{"size":1129,"mtime":1691649436382,"results":"24","hashOfConfig":"14"},{"size":239,"mtime":1691648863222,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xonovq",{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\poc\\react-embedd\\src\\index.js",[],"D:\\poc\\react-embedd\\src\\App.js",["59","60","61"],"D:\\poc\\react-embedd\\src\\components\\ChatBot.js",["62","63","64","65","66","67","68","69","70","71"],"import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport axios from 'axios'\r\nimport Cookies from 'js-cookie'\r\nimport { BsFillChatLeftFill } from 'react-icons/bs'\r\nimport { LiaAngleDoubleDownSolid } from 'react-icons/lia'\r\nimport useAudioRecorder from '../hooks/recordAudio'\r\n\r\nconst base = 'https://justvoicebackend-vrtx.vercel.app'\r\n\r\n// FULL BOT CONTEXT\r\n\r\nlet mediaRecorder = null\r\nconst Chatbot = ({ siteURL }) => {\r\n  const defaultContextSchema = {\r\n    role: 'system',\r\n    content: `I am an AI Assistant of ${siteURL}  here to help you with your queries. You can ask me anything about our products and services.`,\r\n  }\r\n  const [messagesArray, setMessagesArray] = useState([defaultContextSchema])\r\n  const [products, setProducts] = useState([])\r\n  const [prompt, setPrompt] = useState('')\r\n  const [isBlocked, setIsBlocked] = useState(false)\r\n  const [chatOpened, setChatOpened] = useState(false)\r\n  const {\r\n    startRecording,\r\n    stopRecording,\r\n    togglePauseResume,\r\n\r\n    recordingBlob,\r\n    isRecording,\r\n    isPaused,\r\n    recordingTime,\r\n  } = useAudioRecorder()\r\n\r\n  const handleStartRecording = () => {\r\n    startRecording()\r\n  }\r\n\r\n  const handleStopRecording = async () => {\r\n    stopRecording()\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleAudioRecordingComplete(recordingBlob)\r\n  }, [recordingBlob])\r\n\r\n  const handleAudioRecordingComplete = async (audioBlob) => {\r\n    try {\r\n      const formData = new FormData()\r\n      formData.append('file', audioBlob, 'audio.wav')\r\n      // formData.append('model', 'whisper-1')\r\n      formData.append('language', 'en')\r\n\r\n      let voiceapi = base + '/api/voicechat'\r\n\r\n      const response = await fetch(voiceapi, {\r\n        method: 'POST',\r\n        body: formData,\r\n      })\r\n\r\n      if (response.ok) {\r\n        const { text, error } = await response.json()\r\n        updateMessagesArray(text)\r\n      } else {\r\n        console.error('Failed to send audio to the API.')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending audio to the API:', error)\r\n    }\r\n  }\r\n\r\n  const requestVoice = async (textInput) => {\r\n    const url = base + '/api/readvoice'\r\n\r\n    try {\r\n      const res = await fetch(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ text: textInput }),\r\n      })\r\n\r\n      if (res.status === 200) {\r\n        const audioBuffer = await res.arrayBuffer()\r\n        const audioContext = new AudioContext()\r\n        const audioBufferSource = audioContext.createBufferSource()\r\n        audioContext.decodeAudioData(audioBuffer, (buffer) => {\r\n          audioBufferSource.buffer = buffer\r\n          audioBufferSource.connect(audioContext.destination)\r\n          audioBufferSource.start()\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      messagesArray.length > 1 &&\r\n      messagesArray[messagesArray.length - 1].role !== 'system'\r\n    ) {\r\n      handleChatRequest()\r\n    }\r\n  }, [messagesArray, products])\r\n\r\n  const updateMessagesArray = (newMessage) => {\r\n    const newMessageSchema = {\r\n      role: 'user',\r\n      content: newMessage,\r\n    }\r\n    setMessagesArray((prevState) => [...prevState, newMessageSchema])\r\n  }\r\n\r\n  const handleChatRequest = async () => {\r\n    const key = 'chat_memory'\r\n    let convoSummary = Cookies.get(key) ? JSON.parse(Cookies.get(key)) : ''\r\n    const aisummary = {\r\n      role: 'system',\r\n      content: 'this is the summary of conversation i know ' + convoSummary,\r\n    }\r\n\r\n    try {\r\n      const obj = {\r\n        conversationId: Cookies.get('convoId') ? Cookies.get('convoId') : '',\r\n        textInput: messagesArray[messagesArray.length - 1].content,\r\n        siteURL: 'nani.pk',\r\n      }\r\n\r\n      const apiUrl = base + '/api/chatgpt/openai'\r\n\r\n      const response = await axios.post(apiUrl, {\r\n        input: obj,\r\n        summary: aisummary,\r\n      })\r\n\r\n      let { result, summary, convoId } = await response.data\r\n      if (obj.conversationId.length < 1) {\r\n        Cookies.set('convoId', convoId)\r\n      }\r\n\r\n      if (result.content.length > 0) {\r\n        setMessagesArray((prevState) => [...prevState, result])\r\n        console.log('result')\r\n        await requestVoice(result.content)\r\n\r\n        Cookies.remove(key)\r\n        Cookies.set(key, JSON.stringify(summary))\r\n      } else {\r\n        setProducts(result.result)\r\n\r\n        setMessagesArray((prevState) => [...prevState, result])\r\n        Cookies.remove(key)\r\n        Cookies.set(key, JSON.stringify(summary))\r\n      }\r\n    } catch (error) {\r\n      const result = {\r\n        role: 'system',\r\n        content:\r\n          'Sorry, I am not able to understand your query. Please try again.',\r\n      }\r\n      setMessagesArray((prevState) => [...prevState, result])\r\n      await requestVoice(result.content)\r\n\r\n      console.error('Error:', error)\r\n    }\r\n  }\r\n\r\n  const handleTextSubmit = () => {\r\n    if (prompt == '') {\r\n      alert('no input')\r\n      return\r\n    } else {\r\n      updateMessagesArray(prompt)\r\n      setPrompt('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!chatOpened ? (\r\n        <div onClick={() => setChatOpened(true)} className=\"chaticon\">\r\n          <BsFillChatLeftFill />\r\n        </div>\r\n      ) : (\r\n        <div className=\"chat-container\">\r\n          <div className=\"chat-head\">\r\n            <h1>{siteURL}</h1>\r\n            <div>\r\n              <LiaAngleDoubleDownSolid\r\n                onClick={() => setChatOpened(false)}\r\n                className=\"closeicon\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex-1 bg-white flex items-start justify-start\">\r\n            <div className=\"message-body\">\r\n              {messagesArray.map((message, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`message-container ${\r\n                    message.role === 'user' ? 'user-message' : 'bot-message'\r\n                  }`}\r\n                >\r\n                  {message.role === 'user' && (\r\n                    <img\r\n                      src=\"https://img.freepik.com/premium-vector/young-smiling-man-avatar-man-with-brown-beard-mustache-hair-wearing-yellow-sweater-sweatshirt-3d-vector-people-character-illustration-cartoon-minimal-style_365941-860.jpg\" // Replace with the URL of the user's avatar image\r\n                      alt=\"User Avatar\"\r\n                      className=\"avatar\"\r\n                    />\r\n                  )}\r\n\r\n                  <div className={`message-bubble ${message.role}`}>\r\n                    <p className=\"msg-body\">{message.content}</p>\r\n                  </div>\r\n\r\n                  {message.role === 'system' && (\r\n                    <img\r\n                      alt=\"Bot Avatar\"\r\n                      src=\"https://herobot.app/wp-content/uploads/2022/11/AI-bot-1.jpg\"\r\n                      className=\"avatar\"\r\n                    />\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"chat-input\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"chat-input-text\"\r\n              placeholder=\"Type your message...\"\r\n              onChange={(e) => setPrompt(e.target.value)}\r\n              onKeyPress={(e) => {\r\n                if (e.key === 'Enter') {\r\n                  handleTextSubmit()\r\n                }\r\n              }}\r\n            />\r\n\r\n            <button\r\n              onClick={isRecording ? handleStopRecording : handleStartRecording}\r\n            >\r\n              {isRecording ? 'Stop Recording' : 'Start Recording'}\r\n            </button>\r\n            {isBlocked && (\r\n              <p>\r\n                Microphone access blocked. Please allow microphone access to use\r\n                this feature.\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Chatbot\r\n",["72","73"],"D:\\poc\\react-embedd\\src\\hooks\\recordAudio.js",["74","75"],"import { useState, useCallback } from 'react'\r\n\r\nconst useAudioRecorder = (\r\n  audioTrackConstraints,\r\n  onNotAllowedOrFound,\r\n  mediaRecorderOptions\r\n) => {\r\n  const [isRecording, setIsRecording] = useState(false)\r\n  const [isPaused, setIsPaused] = useState(false)\r\n  const [recordingTime, setRecordingTime] = useState(0)\r\n  const [mediaRecorder, setMediaRecorder] = useState()\r\n  const [timerInterval, setTimerInterval] = useState()\r\n  const [recordingBlob, setRecordingBlob] = useState()\r\n\r\n  const _startTimer = useCallback(() => {\r\n    const interval = setInterval(() => {\r\n      setRecordingTime((time) => time + 1)\r\n    }, 1000)\r\n    setTimerInterval(interval)\r\n  }, [setRecordingTime, setTimerInterval])\r\n\r\n  const _stopTimer = useCallback(() => {\r\n    if (timerInterval != null) clearInterval(timerInterval)\r\n    setTimerInterval(undefined)\r\n  }, [timerInterval, setTimerInterval])\r\n\r\n  const startRecording = useCallback(() => {\r\n    if (timerInterval != null) return\r\n\r\n    navigator.mediaDevices\r\n      .getUserMedia({ audio: audioTrackConstraints ?? true })\r\n      .then((stream) => {\r\n        setIsRecording(true)\r\n        const recorder = new MediaRecorder(stream, mediaRecorderOptions)\r\n        setMediaRecorder(recorder)\r\n        recorder.start()\r\n        _startTimer()\r\n\r\n        recorder.addEventListener('dataavailable', (event) => {\r\n          setRecordingBlob(event.data)\r\n          recorder.stream.getTracks().forEach((t) => t.stop())\r\n          setMediaRecorder(undefined)\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.name, err.message, err.cause)\r\n        onNotAllowedOrFound?.(err)\r\n      })\r\n  }, [\r\n    timerInterval,\r\n    setIsRecording,\r\n    setMediaRecorder,\r\n    _startTimer,\r\n    setRecordingBlob,\r\n    onNotAllowedOrFound,\r\n    mediaRecorderOptions,\r\n  ])\r\n\r\n  const stopRecording = useCallback(() => {\r\n    mediaRecorder?.stop()\r\n    _stopTimer()\r\n    setRecordingTime(0)\r\n    setIsRecording(false)\r\n    setIsPaused(false)\r\n  }, [mediaRecorder, setRecordingTime, setIsRecording, setIsPaused, _stopTimer])\r\n\r\n  const togglePauseResume = useCallback(() => {\r\n    if (isPaused) {\r\n      setIsPaused(false)\r\n      mediaRecorder?.resume()\r\n      _startTimer()\r\n    } else {\r\n      setIsPaused(true)\r\n      _stopTimer()\r\n      mediaRecorder?.pause()\r\n    }\r\n  }, [mediaRecorder, setIsPaused, _startTimer, _stopTimer])\r\n\r\n  return {\r\n    startRecording,\r\n    stopRecording,\r\n    togglePauseResume,\r\n    recordingBlob,\r\n    isRecording,\r\n    isPaused,\r\n    recordingTime,\r\n    mediaRecorder,\r\n  }\r\n}\r\n\r\nexport default useAudioRecorder\r\n",["76","77"],"D:\\poc\\react-embedd\\src\\components\\UrduBot.js",["78","79","80","81","82","83","84","85","86","87","88","89","90","91"],"D:\\poc\\react-embedd\\src\\components\\chat\\index.jsx",["92","93","94","95","96","97","98","99","100","101","102"],"D:\\poc\\react-embedd\\src\\components\\chat\\body\\index.jsx",[],"D:\\poc\\react-embedd\\src\\components\\chat\\input\\index.jsx",["103"],"import React from 'react'\r\nimport { BsFillMicFill } from 'react-icons/bs'\r\n\r\nconst Input = ({\r\n  handleStartRecording,\r\n  handleStopRecording,\r\n  setPrompt,\r\n  prompt,\r\n  isRecording,\r\n}) => {\r\n  return (\r\n    <div className=\"justvoice__input\">\r\n      <div className=\"justvoice__input__top__border\"></div>\r\n      <div className=\"justvoice__input__textarea\">\r\n        <textarea\r\n          name=\"enter_msg\"\r\n          id=\"enter_msg\"\r\n          value={prompt}\r\n          placeholder=\"Enter your message...\"\r\n          onChange={(e) => setPrompt(e.target.value)}\r\n        ></textarea>\r\n      </div>\r\n      <div className=\"justvoice__bottom__layout\">\r\n        <div className=\"justvoice__mic__button\">\r\n          {isRecording ? (\r\n            <div className=\"justvoice__mic__zindex\" onClick={handleStopRecording} >\r\n              <BsFillMicFill className=\"justvoice__mic__icon_recording\" />\r\n            </div>\r\n          ) : (\r\n            <div className=\"justvoice__mic__zindex\" onClick={handleStartRecording} >\r\n              <BsFillMicFill className=\"justvoice__mic__icon\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <small className=\"justvoice__bottom__copyright\">\r\n          <span>Powered by</span>{' '}\r\n          <a\r\n            href=\"https://www.justautofy.com/products/justvoice\"\r\n            target=\"_blank\"\r\n          >\r\n            <img\r\n              className=\"justvoice__bottom__copyright__img\"\r\n              src=\"https://www.justautofy.com/assets/images/shared/logo-dark.svg\"\r\n              alt=\"img\"\r\n            />\r\n          </a>\r\n        </small>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input\r\n",["104","105"],"D:\\poc\\react-embedd\\src\\components\\chat\\chat-button\\index.jsx",[],["106","107"],"D:\\poc\\react-embedd\\src\\components\\chat\\body\\message.jsx",["108"],"import React from 'react'\r\n\r\nconst Message = (props) => {\r\n  const { sentBy, message, key,funcResult } = props\r\n  return (\r\n    <div\r\n      className={`${\r\n        sentBy === 'user'\r\n          ? 'justvoice__chat__msg__user'\r\n          : 'justvoice__chat__msg__bot'\r\n      }`}\r\n    >\r\n      {message?.length > 0 ? message : (\r\n        <div>\r\n          {funcResult?.map((m)=>(\r\n            <img src={m.image} className='w-[200px] h-[200px]' alt=\"\" />\r\n          ))}\r\n        </div>\r\n      ) }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message\r\n","D:\\poc\\react-embedd\\src\\components\\chat\\header\\index.jsx",[],["109","110"],"D:\\poc\\react-embedd\\src\\components\\chat\\alert\\index.jsx",[],{"ruleId":"111","severity":1,"message":"112","line":2,"column":8,"nodeType":"113","messageId":"114","endLine":2,"endColumn":15},{"ruleId":"111","severity":1,"message":"115","line":3,"column":8,"nodeType":"113","messageId":"114","endLine":3,"endColumn":19},{"ruleId":"111","severity":1,"message":"116","line":4,"column":8,"nodeType":"113","messageId":"114","endLine":4,"endColumn":15},{"ruleId":"111","severity":1,"message":"117","line":1,"column":38,"nodeType":"113","messageId":"114","endLine":1,"endColumn":44},{"ruleId":"111","severity":1,"message":"118","line":13,"column":5,"nodeType":"113","messageId":"114","endLine":13,"endColumn":18},{"ruleId":"111","severity":1,"message":"119","line":22,"column":21,"nodeType":"113","messageId":"114","endLine":22,"endColumn":33},{"ruleId":"111","severity":1,"message":"120","line":27,"column":5,"nodeType":"113","messageId":"114","endLine":27,"endColumn":22},{"ruleId":"111","severity":1,"message":"121","line":31,"column":5,"nodeType":"113","messageId":"114","endLine":31,"endColumn":13},{"ruleId":"111","severity":1,"message":"122","line":32,"column":5,"nodeType":"113","messageId":"114","endLine":32,"endColumn":18},{"ruleId":"123","severity":1,"message":"124","line":45,"column":6,"nodeType":"125","endLine":45,"endColumn":21,"suggestions":"126"},{"ruleId":"111","severity":1,"message":"127","line":62,"column":23,"nodeType":"113","messageId":"114","endLine":62,"endColumn":28},{"ruleId":"123","severity":1,"message":"128","line":103,"column":6,"nodeType":"125","endLine":103,"endColumn":31,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":168,"column":16,"nodeType":"132","messageId":"133","endLine":168,"endColumn":18},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"123","severity":1,"message":"138","line":49,"column":6,"nodeType":"125","endLine":57,"endColumn":4,"suggestions":"139"},{"ruleId":"123","severity":1,"message":"140","line":77,"column":6,"nodeType":"125","endLine":77,"endColumn":59,"suggestions":"141"},{"ruleId":"134","replacedBy":"142"},{"ruleId":"136","replacedBy":"143"},{"ruleId":"111","severity":1,"message":"117","line":1,"column":38,"nodeType":"113","messageId":"114","endLine":1,"endColumn":44},{"ruleId":"111","severity":1,"message":"144","line":18,"column":5,"nodeType":"113","messageId":"114","endLine":18,"endColumn":12},{"ruleId":"111","severity":1,"message":"118","line":20,"column":5,"nodeType":"113","messageId":"114","endLine":20,"endColumn":18},{"ruleId":"111","severity":1,"message":"119","line":25,"column":21,"nodeType":"113","messageId":"114","endLine":25,"endColumn":33},{"ruleId":"111","severity":1,"message":"145","line":27,"column":10,"nodeType":"113","messageId":"114","endLine":27,"endColumn":16},{"ruleId":"111","severity":1,"message":"146","line":27,"column":18,"nodeType":"113","messageId":"114","endLine":27,"endColumn":27},{"ruleId":"111","severity":1,"message":"147","line":28,"column":10,"nodeType":"113","messageId":"114","endLine":28,"endColumn":19},{"ruleId":"111","severity":1,"message":"148","line":28,"column":21,"nodeType":"113","messageId":"114","endLine":28,"endColumn":33},{"ruleId":"111","severity":1,"message":"120","line":32,"column":5,"nodeType":"113","messageId":"114","endLine":32,"endColumn":22},{"ruleId":"111","severity":1,"message":"121","line":35,"column":5,"nodeType":"113","messageId":"114","endLine":35,"endColumn":13},{"ruleId":"111","severity":1,"message":"122","line":36,"column":5,"nodeType":"113","messageId":"114","endLine":36,"endColumn":18},{"ruleId":"123","severity":1,"message":"124","line":51,"column":6,"nodeType":"125","endLine":51,"endColumn":21,"suggestions":"149"},{"ruleId":"123","severity":1,"message":"128","line":113,"column":6,"nodeType":"125","endLine":113,"endColumn":31,"suggestions":"150"},{"ruleId":"130","severity":1,"message":"131","line":175,"column":16,"nodeType":"132","messageId":"133","endLine":175,"endColumn":18},{"ruleId":"151","severity":1,"message":"152","line":20,"column":45,"nodeType":"132","messageId":"153","endLine":20,"endColumn":46},{"ruleId":"123","severity":1,"message":"154","line":38,"column":6,"nodeType":"125","endLine":38,"endColumn":8,"suggestions":"155"},{"ruleId":"111","severity":1,"message":"120","line":71,"column":5,"nodeType":"113","messageId":"114","endLine":71,"endColumn":22},{"ruleId":"111","severity":1,"message":"121","line":75,"column":5,"nodeType":"113","messageId":"114","endLine":75,"endColumn":13},{"ruleId":"111","severity":1,"message":"122","line":76,"column":5,"nodeType":"113","messageId":"114","endLine":76,"endColumn":18},{"ruleId":"123","severity":1,"message":"124","line":89,"column":6,"nodeType":"125","endLine":89,"endColumn":21,"suggestions":"156"},{"ruleId":"130","severity":1,"message":"131","line":105,"column":14,"nodeType":"132","messageId":"133","endLine":105,"endColumn":16},{"ruleId":"130","severity":1,"message":"131","line":144,"column":18,"nodeType":"132","messageId":"133","endLine":144,"endColumn":20},{"ruleId":"123","severity":1,"message":"128","line":171,"column":6,"nodeType":"125","endLine":171,"endColumn":31,"suggestions":"157"},{"ruleId":"130","severity":1,"message":"131","line":256,"column":16,"nodeType":"132","messageId":"133","endLine":256,"endColumn":18},{"ruleId":"130","severity":1,"message":"131","line":272,"column":16,"nodeType":"132","messageId":"133","endLine":272,"endColumn":18},{"ruleId":"158","severity":1,"message":"159","line":39,"column":13,"nodeType":"160","endLine":39,"endColumn":28},{"ruleId":"134","replacedBy":"161"},{"ruleId":"136","replacedBy":"162"},{"ruleId":"134","replacedBy":"163"},{"ruleId":"136","replacedBy":"164"},{"ruleId":"111","severity":1,"message":"165","line":4,"column":28,"nodeType":"113","messageId":"114","endLine":4,"endColumn":31},{"ruleId":"134","replacedBy":"166"},{"ruleId":"136","replacedBy":"167"},"no-unused-vars","'ChatBot' is defined but never used.","Identifier","unusedVar","'ChatbotTest' is defined but never used.","'Chatbot' is defined but never used.","'useRef' is defined but never used.","'mediaRecorder' is assigned a value but never used.","'setIsBlocked' is assigned a value but never used.","'togglePauseResume' is assigned a value but never used.","'isPaused' is assigned a value but never used.","'recordingTime' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleAudioRecordingComplete'. Either include it or remove the dependency array.","ArrayExpression",["168"],"'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleChatRequest'. Either include it or remove the dependency array.",["169"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["170"],"no-negated-in-lhs",["171"],"React Hook useCallback has a missing dependency: 'audioTrackConstraints'. Either include it or remove the dependency array.",["172"],"React Hook useCallback has a missing dependency: 'isPaused'. Either include it or remove the dependency array.",["173"],["170"],["171"],"'newbase' is assigned a value but never used.","'record' is assigned a value but never used.","'setRecord' is assigned a value but never used.","'audioBlob' is assigned a value but never used.","'setAudioBlob' is assigned a value but never used.",["174"],["175"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'apiKey' and 'mail'. Either include them or remove the dependency array.",["176"],["177"],["178"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["170"],["171"],["170"],["171"],"'key' is assigned a value but never used.",["170"],["171"],{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},"no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"179","fix":"187"},{"desc":"181","fix":"188"},{"desc":"189","fix":"190"},{"desc":"179","fix":"191"},{"desc":"181","fix":"192"},"Update the dependencies array to be: [handleAudioRecordingComplete, recordingBlob]",{"range":"193","text":"194"},"Update the dependencies array to be: [handleChatRequest, messagesArray, products]",{"range":"195","text":"196"},"Update the dependencies array to be: [timerInterval, audioTrackConstraints, mediaRecorderOptions, _startTimer, onNotAllowedOrFound]",{"range":"197","text":"198"},"Update the dependencies array to be: [isPaused, mediaRecorder, _startTimer, _stopTimer]",{"range":"199","text":"200"},{"range":"201","text":"194"},{"range":"202","text":"196"},"Update the dependencies array to be: [apiKey, mail]",{"range":"203","text":"204"},{"range":"205","text":"194"},{"range":"206","text":"196"},[1313,1328],"[handleAudioRecordingComplete, recordingBlob]",[2964,2989],"[handleChatRequest, messagesArray, products]",[1651,1815],"[timerInterval, audioTrackConstraints, mediaRecorderOptions, _startTimer, onNotAllowedOrFound]",[2319,2372],"[isPaused, mediaRecorder, _startTimer, _stopTimer]",[1577,1592],[3366,3391],[1066,1068],"[apiKey, mail]",[2415,2430],[4922,4947]]